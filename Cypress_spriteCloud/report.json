{
  "stats": {
    "suites": 6,
    "tests": 30,
    "passes": 27,
    "pending": 0,
    "failures": 3,
    "start": "2022-10-11T07:45:25.714Z",
    "end": "2022-10-11T08:19:25.322Z",
    "duration": 19931,
    "testsRegistered": 30,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4b0d1317-3a63-4939-bafa-5ba5c7d13680",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "820b9222-30a2-4897-b956-869fd1b29bdd",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1270,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "1f77ade2-db8d-4bde-82c7-35d6eb0322a8",
              "parentUUID": "820b9222-30a2-4897-b956-869fd1b29bdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 844,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "5dcba30d-adb6-4af1-b059-050d2edc892a",
              "parentUUID": "820b9222-30a2-4897-b956-869fd1b29bdd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 526,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "5824f83c-4e1f-4907-af44-a374c88e961b",
              "parentUUID": "820b9222-30a2-4897-b956-869fd1b29bdd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "90c5266b-0c03-430e-8409-589dba288729",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 739,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "e9d5b936-a255-45f4-9b9b-66098f1d4c09",
                  "parentUUID": "90c5266b-0c03-430e-8409-589dba288729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 607,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "7738a5ac-8095-48f2-94c4-5b48485174db",
                  "parentUUID": "90c5266b-0c03-430e-8409-589dba288729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 549,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "7a9eae81-dbdf-4595-9ff9-5290aae453b7",
                  "parentUUID": "90c5266b-0c03-430e-8409-589dba288729",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9d5b936-a255-45f4-9b9b-66098f1d4c09",
                "7738a5ac-8095-48f2-94c4-5b48485174db",
                "7a9eae81-dbdf-4595-9ff9-5290aae453b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1895,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "1f77ade2-db8d-4bde-82c7-35d6eb0322a8",
            "5dcba30d-adb6-4af1-b059-050d2edc892a",
            "5824f83c-4e1f-4907-af44-a374c88e961b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2640,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e162bd29-3b34-4a68-8075-f5289b32f9fe",
      "title": "",
      "fullFile": "cypress\\e2e\\accessToPetStoreOrdersAPIspec.cy.ts",
      "file": "cypress\\e2e\\accessToPetStoreOrdersAPIspec.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4b126017-278c-4463-add4-5f77bde7d298",
          "title": "Access to Petstore Orders",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST Request - Place an order for a pet",
              "fullTitle": "Access to Petstore Orders POST Request - Place an order for a pet",
              "timedOut": null,
              "duration": 1680,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(url);\nvar urlPlacePetOrder = url + 'store/order';\ncy.request({\n    method: 'POST',\n    url: urlPlacePetOrder,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: requestBody\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    expect(response.body.status).to.equal('placed');\n    cy.task('setOrderId', response.body.id);\n    cy.log('Post Request response body is:' + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "43f366c5-bffb-4922-8e9a-7aa5bb4eea1c",
              "parentUUID": "4b126017-278c-4463-add4-5f77bde7d298",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET Request - Find Purchase Order by ID",
              "fullTitle": "Access to Petstore Orders GET Request - Find Purchase Order by ID",
              "timedOut": null,
              "duration": 498,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var urlGetOrderDtls = url + 'store/order/3';\ncy.request({\n    method: 'GET',\n    url: urlGetOrderDtls,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    expect(response.body.id).to.equal(3);\n    expect(response.body.complete).to.equal(true);\n    cy.log('Order Summary Details is:' + JSON.stringify(response.body));\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://petstore.swagger.io/v2/store/order/3\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: https://petstore.swagger.io/v2/store/order/3\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Content-Type\": \"application/json\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/10.9.0 Chrome/102.0.5005.148 Electron/19.0.8 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Tue, 11 Oct 2022 07:46:39 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, DELETE, PUT\",\n  \"access-control-allow-headers\": \"Content-Type, api_key, Authorization\",\n  \"server\": \"Jetty(9.2.9.v20150224)\"\n}\nBody: {\n  \"code\": 1,\n  \"type\": \"error\",\n  \"message\": \"Order not found\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://petstore.swagger.io/v2/store/order/3\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: https://petstore.swagger.io/v2/store/order/3\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Content-Type\": \"application/json\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/10.9.0 Chrome/102.0.5005.148 Electron/19.0.8 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Tue, 11 Oct 2022 07:46:39 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, DELETE, PUT\",\n  \"access-control-allow-headers\": \"Content-Type, api_key, Authorization\",\n  \"server\": \"Jetty(9.2.9.v20150224)\"\n}\nBody: {\n  \"code\": 1,\n  \"type\": \"error\",\n  \"message\": \"Order not found\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:3681/__cypress/runner/cypress_runner.js:144025:80)\n    at tryCatcher (http://localhost:3681/__cypress/runner/cypress_runner.js:11318:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3681/__cypress/runner/cypress_runner.js:9253:31)\n    at Promise._settlePromise (http://localhost:3681/__cypress/runner/cypress_runner.js:9310:18)\n    at Promise._settlePromise0 (http://localhost:3681/__cypress/runner/cypress_runner.js:9355:10)\n    at Promise._settlePromises (http://localhost:3681/__cypress/runner/cypress_runner.js:9435:18)\n    at _drainQueueStep (http://localhost:3681/__cypress/runner/cypress_runner.js:6025:12)\n    at _drainQueue (http://localhost:3681/__cypress/runner/cypress_runner.js:6018:9)\n    at ../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3681/__cypress/runner/cypress_runner.js:6034:5)\n    at Async.drainQueues (http://localhost:3681/__cypress/runner/cypress_runner.js:5904:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/accessToPetStoreOrdersAPIspec.cy.ts:38:11)",
                "diff": null
              },
              "uuid": "f842405f-c29a-40e2-8a21-045d9900cdfa",
              "parentUUID": "4b126017-278c-4463-add4-5f77bde7d298",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE Request -DELETE Purchase Order by ID",
              "fullTitle": "Access to Petstore Orders DELETE Request -DELETE Purchase Order by ID",
              "timedOut": null,
              "duration": 347,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getOrderId').then(function (orderId) {\n    var urlDeleteRequest = url + 'store/order' + orderId;\n    cy.request({\n        method: 'GET',\n        url: urlDeleteRequest,\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        failOnStatusCode: false\n    })\n        .then(function (response) {\n        expect(response.status).to.equal(404);\n        expect(response.body.code);\n    });\n});",
              "err": {},
              "uuid": "88284273-c907-4527-999c-40e06ee431e0",
              "parentUUID": "4b126017-278c-4463-add4-5f77bde7d298",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET Request - Returns pet Inventories by Status",
              "fullTitle": "Access to Petstore Orders GET Request - Returns pet Inventories by Status",
              "timedOut": null,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var urlGetInventory = url + 'store/inventory';\ncy.request({\n    method: 'GET',\n    url: urlGetInventory,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    cy.log('Inventory details:' + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "2b56a175-dd2e-486b-b8a4-140a7c4fa504",
              "parentUUID": "4b126017-278c-4463-add4-5f77bde7d298",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43f366c5-bffb-4922-8e9a-7aa5bb4eea1c",
            "88284273-c907-4527-999c-40e06ee431e0",
            "2b56a175-dd2e-486b-b8a4-140a7c4fa504"
          ],
          "failures": [
            "f842405f-c29a-40e2-8a21-045d9900cdfa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2905,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a5b9c638-c23d-41f7-bcfc-e6a3aa4e6397",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3fecc774-a18c-446d-9078-29b39c78e01e",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 686,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "f33ca236-1488-4b55-a3dd-314cd6e90930",
              "parentUUID": "3fecc774-a18c-446d-9078-29b39c78e01e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 612,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "b3eba4d5-6e61-4faf-919e-1dbd628a8068",
              "parentUUID": "3fecc774-a18c-446d-9078-29b39c78e01e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 343,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "cc15668c-d6ed-47d5-849b-d4b7833c315a",
              "parentUUID": "3fecc774-a18c-446d-9078-29b39c78e01e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "134798c4-6265-4ddf-b258-85cf9dfb08fd",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 587,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "ebb32c6e-48ba-437d-9d1a-d2609919f6d7",
                  "parentUUID": "134798c4-6265-4ddf-b258-85cf9dfb08fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 602,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "cc568c05-0cbe-401d-834e-cfebd86b7158",
                  "parentUUID": "134798c4-6265-4ddf-b258-85cf9dfb08fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 625,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "80718c11-8d80-426f-9519-1678eee70607",
                  "parentUUID": "134798c4-6265-4ddf-b258-85cf9dfb08fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebb32c6e-48ba-437d-9d1a-d2609919f6d7",
                "cc568c05-0cbe-401d-834e-cfebd86b7158",
                "80718c11-8d80-426f-9519-1678eee70607"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1814,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "f33ca236-1488-4b55-a3dd-314cd6e90930",
            "b3eba4d5-6e61-4faf-919e-1dbd628a8068",
            "cc15668c-d6ed-47d5-849b-d4b7833c315a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1641,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fab4d2eb-8900-40ad-92c1-093e7a4d0f23",
      "title": "",
      "fullFile": "cypress\\e2e\\accessToPetStoreOrdersAPIspec.cy.ts",
      "file": "cypress\\e2e\\accessToPetStoreOrdersAPIspec.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "146f4bd8-860b-4a14-b677-43c4101aa08b",
          "title": "Access to Petstore Orders",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST Request - Place an order for a pet",
              "fullTitle": "Access to Petstore Orders POST Request - Place an order for a pet",
              "timedOut": null,
              "duration": 1419,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(url);\nvar urlPlacePetOrder = url + 'store/order';\ncy.request({\n    method: 'POST',\n    url: urlPlacePetOrder,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: requestBody\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    expect(response.body.status).to.equal('placed');\n    cy.task('setOrderId', response.body.id);\n    cy.log('Post Request response body is:' + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "3177a802-bbb8-416a-b1d0-fde20b0916fc",
              "parentUUID": "146f4bd8-860b-4a14-b677-43c4101aa08b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET Request - Find Purchase Order by ID",
              "fullTitle": "Access to Petstore Orders GET Request - Find Purchase Order by ID",
              "timedOut": null,
              "duration": 473,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var urlGetOrderDtls = url + 'store/order/3';\ncy.request({\n    method: 'GET',\n    url: urlGetOrderDtls,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    expect(response.body.id).to.equal(3);\n    expect(response.body.complete).to.equal(true);\n    cy.log('Order Summary Details is:' + JSON.stringify(response.body));\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://petstore.swagger.io/v2/store/order/3\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: https://petstore.swagger.io/v2/store/order/3\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Content-Type\": \"application/json\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/10.9.0 Chrome/102.0.5005.148 Electron/19.0.8 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Tue, 11 Oct 2022 08:19:13 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, DELETE, PUT\",\n  \"access-control-allow-headers\": \"Content-Type, api_key, Authorization\",\n  \"server\": \"Jetty(9.2.9.v20150224)\"\n}\nBody: {\n  \"code\": 1,\n  \"type\": \"error\",\n  \"message\": \"Order not found\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://petstore.swagger.io/v2/store/order/3\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: https://petstore.swagger.io/v2/store/order/3\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Content-Type\": \"application/json\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/10.9.0 Chrome/102.0.5005.148 Electron/19.0.8 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Tue, 11 Oct 2022 08:19:13 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, DELETE, PUT\",\n  \"access-control-allow-headers\": \"Content-Type, api_key, Authorization\",\n  \"server\": \"Jetty(9.2.9.v20150224)\"\n}\nBody: {\n  \"code\": 1,\n  \"type\": \"error\",\n  \"message\": \"Order not found\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:3861/__cypress/runner/cypress_runner.js:144025:80)\n    at tryCatcher (http://localhost:3861/__cypress/runner/cypress_runner.js:11318:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3861/__cypress/runner/cypress_runner.js:9253:31)\n    at Promise._settlePromise (http://localhost:3861/__cypress/runner/cypress_runner.js:9310:18)\n    at Promise._settlePromise0 (http://localhost:3861/__cypress/runner/cypress_runner.js:9355:10)\n    at Promise._settlePromises (http://localhost:3861/__cypress/runner/cypress_runner.js:9435:18)\n    at _drainQueueStep (http://localhost:3861/__cypress/runner/cypress_runner.js:6025:12)\n    at _drainQueue (http://localhost:3861/__cypress/runner/cypress_runner.js:6018:9)\n    at ../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3861/__cypress/runner/cypress_runner.js:6034:5)\n    at Async.drainQueues (http://localhost:3861/__cypress/runner/cypress_runner.js:5904:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/accessToPetStoreOrdersAPIspec.cy.ts:38:11)",
                "diff": null
              },
              "uuid": "e9a53212-7bed-4b37-9e12-2e482c10f74d",
              "parentUUID": "146f4bd8-860b-4a14-b677-43c4101aa08b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE Request -DELETE Purchase Order by ID",
              "fullTitle": "Access to Petstore Orders DELETE Request -DELETE Purchase Order by ID",
              "timedOut": null,
              "duration": 298,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getOrderId').then(function (orderId) {\n    var urlDeleteRequest = url + 'store/order' + orderId;\n    cy.request({\n        method: 'GET',\n        url: urlDeleteRequest,\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        failOnStatusCode: false\n    })\n        .then(function (response) {\n        expect(response.status).to.equal(404);\n        expect(response.body.code);\n    });\n});",
              "err": {},
              "uuid": "3591c95c-ffae-4b44-90b4-ecd5a09776d8",
              "parentUUID": "146f4bd8-860b-4a14-b677-43c4101aa08b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET Request - Returns pet Inventories by Status",
              "fullTitle": "Access to Petstore Orders GET Request - Returns pet Inventories by Status",
              "timedOut": null,
              "duration": 285,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var urlGetInventory = url + 'store/inventory';\ncy.request({\n    method: 'GET',\n    url: urlGetInventory,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    cy.log('Inventory details:' + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "b3c0e96d-504a-4e53-a7df-52589cfebd17",
              "parentUUID": "146f4bd8-860b-4a14-b677-43c4101aa08b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3177a802-bbb8-416a-b1d0-fde20b0916fc",
            "3591c95c-ffae-4b44-90b4-ecd5a09776d8",
            "b3c0e96d-504a-4e53-a7df-52589cfebd17"
          ],
          "failures": [
            "e9a53212-7bed-4b37-9e12-2e482c10f74d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2475,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d94a14e7-eb50-4018-8a99-67509168cbac",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e66a7d9-75a6-47c9-b471-591c3da892c8",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1068,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2); // We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "27ff2d25-84ab-4651-b3f9-16dcf64abd24",
              "parentUUID": "2e66a7d9-75a6-47c9-b471-591c3da892c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 832,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "b830dc1f-f71c-43f6-9c43-fb9fbac2f785",
              "parentUUID": "2e66a7d9-75a6-47c9-b471-591c3da892c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 435,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "fed99477-4d61-4130-b2b3-2160e8477ecd",
              "parentUUID": "2e66a7d9-75a6-47c9-b471-591c3da892c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "83870abd-6042-47f9-a9c3-2aa474de2682",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 639,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "348e60b6-aa07-4976-9b73-e63f0ccb92e1",
                  "parentUUID": "83870abd-6042-47f9-a9c3-2aa474de2682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 471,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "ea9b37e3-fe5c-49ba-a7fe-2cdb4555ca81",
                  "parentUUID": "83870abd-6042-47f9-a9c3-2aa474de2682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 482,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "5cc2e66a-1e1a-4d53-9be6-cf349ac04d7c",
                  "parentUUID": "83870abd-6042-47f9-a9c3-2aa474de2682",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "348e60b6-aa07-4976-9b73-e63f0ccb92e1",
                "ea9b37e3-fe5c-49ba-a7fe-2cdb4555ca81",
                "5cc2e66a-1e1a-4d53-9be6-cf349ac04d7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1592,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "27ff2d25-84ab-4651-b3f9-16dcf64abd24",
            "b830dc1f-f71c-43f6-9c43-fb9fbac2f785",
            "fed99477-4d61-4130-b2b3-2160e8477ecd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2335,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3e1b3e27-c586-4116-81f5-dbcf3ca40acf",
      "title": "",
      "fullFile": "cypress\\e2e\\accessToPetStoreOrdersAPIspec.cy.ts",
      "file": "cypress\\e2e\\accessToPetStoreOrdersAPIspec.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "910a3f85-7781-4fcc-8310-832e99c14c4f",
          "title": "Access to Petstore Orders",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST Request - Place an order for a pet",
              "fullTitle": "Access to Petstore Orders POST Request - Place an order for a pet",
              "timedOut": null,
              "duration": 1508,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(url);\nvar urlPlacePetOrder = url + 'store/order';\ncy.request({\n    method: 'POST',\n    url: urlPlacePetOrder,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: requestBody\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    expect(response.body.status).to.equal('placed');\n    cy.task('setOrderId', response.body.id);\n    cy.log('Post Request response body is:' + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "237b1f35-e9e6-4625-87b9-1e64a7649e85",
              "parentUUID": "910a3f85-7781-4fcc-8310-832e99c14c4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET Request - Find Purchase Order by ID",
              "fullTitle": "Access to Petstore Orders GET Request - Find Purchase Order by ID",
              "timedOut": null,
              "duration": 540,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var urlGetOrderDtls = url + 'store/order/3';\ncy.request({\n    method: 'GET',\n    url: urlGetOrderDtls,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    expect(response.body.id).to.equal(3);\n    expect(response.body.complete).to.equal(true);\n    cy.log('Order Summary Details is:' + JSON.stringify(response.body));\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttps://petstore.swagger.io/v2/store/order/3\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: https://petstore.swagger.io/v2/store/order/3\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Content-Type\": \"application/json\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/10.9.0 Chrome/102.0.5005.148 Electron/19.0.8 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Tue, 11 Oct 2022 07:45:31 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, DELETE, PUT\",\n  \"access-control-allow-headers\": \"Content-Type, api_key, Authorization\",\n  \"server\": \"Jetty(9.2.9.v20150224)\"\n}\nBody: {\n  \"code\": 1,\n  \"type\": \"error\",\n  \"message\": \"Order not found\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttps://petstore.swagger.io/v2/store/order/3\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: https://petstore.swagger.io/v2/store/order/3\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"Content-Type\": \"application/json\",\n  \"user-agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/10.9.0 Chrome/102.0.5005.148 Electron/19.0.8 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"date\": \"Tue, 11 Oct 2022 07:45:31 GMT\",\n  \"content-type\": \"application/json\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, DELETE, PUT\",\n  \"access-control-allow-headers\": \"Content-Type, api_key, Authorization\",\n  \"server\": \"Jetty(9.2.9.v20150224)\"\n}\nBody: {\n  \"code\": 1,\n  \"type\": \"error\",\n  \"message\": \"Order not found\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:3608/__cypress/runner/cypress_runner.js:144025:80)\n    at tryCatcher (http://localhost:3608/__cypress/runner/cypress_runner.js:11318:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3608/__cypress/runner/cypress_runner.js:9253:31)\n    at Promise._settlePromise (http://localhost:3608/__cypress/runner/cypress_runner.js:9310:18)\n    at Promise._settlePromise0 (http://localhost:3608/__cypress/runner/cypress_runner.js:9355:10)\n    at Promise._settlePromises (http://localhost:3608/__cypress/runner/cypress_runner.js:9435:18)\n    at _drainQueueStep (http://localhost:3608/__cypress/runner/cypress_runner.js:6025:12)\n    at _drainQueue (http://localhost:3608/__cypress/runner/cypress_runner.js:6018:9)\n    at ../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3608/__cypress/runner/cypress_runner.js:6034:5)\n    at Async.drainQueues (http://localhost:3608/__cypress/runner/cypress_runner.js:5904:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/accessToPetStoreOrdersAPIspec.cy.ts:38:11)",
                "diff": null
              },
              "uuid": "281e0161-fa7d-4900-93d8-26718204d51a",
              "parentUUID": "910a3f85-7781-4fcc-8310-832e99c14c4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE Request -DELETE Purchase Order by ID",
              "fullTitle": "Access to Petstore Orders DELETE Request -DELETE Purchase Order by ID",
              "timedOut": null,
              "duration": 305,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getOrderId').then(function (orderId) {\n    var urlDeleteRequest = url + 'store/order' + orderId;\n    cy.request({\n        method: 'GET',\n        url: urlDeleteRequest,\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        failOnStatusCode: false\n    })\n        .then(function (response) {\n        expect(response.status).to.equal(404);\n        expect(response.body.code);\n    });\n});",
              "err": {},
              "uuid": "3160fa90-6634-4766-b0f2-7bc74cca5cbf",
              "parentUUID": "910a3f85-7781-4fcc-8310-832e99c14c4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET Request - Returns pet Inventories by Status",
              "fullTitle": "Access to Petstore Orders GET Request - Returns pet Inventories by Status",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var urlGetInventory = url + 'store/inventory';\ncy.request({\n    method: 'GET',\n    url: urlGetInventory,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n})\n    .then(function (response) {\n    expect(response.status).to.equal(200);\n    expect(response.body).not.null;\n    cy.log('Inventory details:' + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "cf802f65-9d5c-4b6c-9769-07d0952a63a0",
              "parentUUID": "910a3f85-7781-4fcc-8310-832e99c14c4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "237b1f35-e9e6-4625-87b9-1e64a7649e85",
            "3160fa90-6634-4766-b0f2-7bc74cca5cbf",
            "cf802f65-9d5c-4b6c-9769-07d0952a63a0"
          ],
          "failures": [
            "281e0161-fa7d-4900-93d8-26718204d51a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2634,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}